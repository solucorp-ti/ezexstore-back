## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Product Photos'
description: |-

  APIs for managing product photos
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/v1/products/{product_id}/photos'
    metadata:
      groupName: 'Product Photos'
      groupDescription: |-

        APIs for managing product photos
      subgroup: ''
      subgroupDescription: ''
      title: 'List Product Photos'
      description: 'Retrieves list of photos for a specific product.'
      authenticated: true
      custom: []
    headers:
      X-API-KEY: '{YOUR_API_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      product_id:
        name: product_id
        description: 'The ID of the product.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      product:
        name: product
        description: 'The ID of the product.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      product_id: 1
      product: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "data": [
              {
                "id": 1,
                "product_id": 1,
                "photo_url": "products/1/1/1_1734660820.png",
                "created_at": "2024-12-20T02:13:40.000000Z",
                "updated_at": "2024-12-20T02:13:40.000000Z",
                "full_url": "http://localhost:8000/storage/products/1/1/1_1734660820.png"
              }
            ],
            "message": "Photos retrieved successfully"
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: |-
          {
            "success": false,
            "message": "Product not found"
          }
        headers: []
        description: 'product not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - X-API-KEY
      - bhk1a6PEDc48v36Veg5fdZa
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/products/{product_id}/photos'
    metadata:
      groupName: 'Product Photos'
      groupDescription: |-

        APIs for managing product photos
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload Product Photos'
      description: 'Uploads one or more photos for a specific product. Send multiple photos using the same form-field name with array notation.'
      authenticated: true
      custom: []
    headers:
      X-API-KEY: '{YOUR_API_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      product_id:
        name: product_id
        description: 'The ID of the product.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      product_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      photos:
        name: photos
        description: 'Must be a file. Must be an image. Must not be greater than 2048 kilobytes.'
        required: true
        example:
          - null
        type: 'file[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'photos[]':
        name: 'photos[]'
        description: 'Array of photo files to upload (max 2MB each, formats: jpg, jpeg, png, webp).'
        required: true
        example: null
        type: 'file[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      'photos[]': null
    fileParameters:
      photos:
        - null
    responses:
      -
        status: 201
        content: |-
          {
            "success": true,
            "data": [
              {
                "id": 1,
                "product_id": 1,
                "photo_url": "products/1/1/1_1734660820.png",
                "created_at": "2024-12-20T02:13:40.000000Z",
                "updated_at": "2024-12-20T02:13:40.000000Z",
                "full_url": "http://localhost:8000/storage/products/1/1/1_1734660820.png"
              }
            ],
            "message": "Photos uploaded successfully"
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "The photos field is required."
          }
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "The photo must be an image file (jpg, jpeg, png, webp)."
          }
        headers: []
        description: 'invalid file'
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "message": "The photo may not be greater than 2MB."
          }
        headers: []
        description: 'file too large'
        custom: []
    responseFields: []
    auth:
      - headers
      - X-API-KEY
      - 54ePgVadE8v1fcZak6D3bh6
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/products/{product_id}/photos/{photo}'
    metadata:
      groupName: 'Product Photos'
      groupDescription: |-

        APIs for managing product photos
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete Product Photo'
      description: 'Deletes a specific photo for the given product. This action cannot be undone.'
      authenticated: true
      custom: []
    headers:
      X-API-KEY: '{YOUR_API_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      product_id:
        name: product_id
        description: 'The ID of the product.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      photo:
        name: photo
        description: 'The photo.'
        required: true
        example: omnis
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      product:
        name: product
        description: 'The ID of the product.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      photoId:
        name: photoId
        description: 'The ID of the photo to delete.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      product_id: 1
      photo: omnis
      product: 1
      photoId: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "data": null,
            "message": "Photo deleted successfully"
          }
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: |-
          {
            "success": false,
            "message": "This action is unauthorized."
          }
        headers: []
        description: unauthorized
        custom: []
      -
        status: 404
        content: |-
          {
            "success": false,
            "message": "Photo not found"
          }
        headers: []
        description: 'not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - X-API-KEY
      - ZhE3b46VgcvaD5ed1ka68fP
    controller: null
    method: null
    route: null
    custom: []
